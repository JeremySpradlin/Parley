from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import logging
import asyncio

from app.api import conversation, health, analytics
from app.state import conversations
from app.services.cleanup import cleanup_conversations_periodically
from app.limiter import limiter
from slowapi.errors import RateLimitExceeded
from slowapi.middleware import SlowAPIMiddleware

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def rate_limit_exceeded_handler(request: Request, exc: RateLimitExceeded):
    # This is a dummy handler, as we are using middleware.
    # The actual response is handled by the middleware.
    # We can add custom logging here if needed.
    logger.warning(f"Rate limit exceeded for {request.client.host}: {exc.detail}")
    # The actual response is generated by the middleware, so we don't return one here.
    # The middleware will raise the HTTPException.
    pass

@asynccontextmanager
async def lifespan(app: FastAPI):
    logger.info("Starting Parley API...")
    app.state.limiter = limiter  # Add the limiter to the app's state
    cleanup_task = asyncio.create_task(cleanup_conversations_periodically(conversations, 600))
    yield
    logger.info("Shutting down Parley API...")
    cleanup_task.cancel()
    try:
        await cleanup_task
    except asyncio.CancelledError:
        logger.info("Cleanup task cancelled.")

app = FastAPI(
    title="Parley API",
    description="API for AI-to-AI conversation management",
    version="0.1.0",
    lifespan=lifespan
)

# The order of middleware is important.
# SlowAPI should be before CORS to ensure limits are checked first,
# but CORS must also handle preflight OPTIONS requests before they are rate-limited.
# A common pattern is to have CORS first to handle OPTIONS requests gracefully.
from app.config import settings

app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.cors_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Add the slowapi middleware after CORS
app.add_middleware(SlowAPIMiddleware)

# It's important to add the exception handler *after* the middleware
app.add_exception_handler(RateLimitExceeded, rate_limit_exceeded_handler)

# Include routers
app.include_router(health.router, tags=["health"])
app.include_router(conversation.router, prefix="/conversation", tags=["conversation"])
app.include_router(analytics.router, prefix="/analytics", tags=["analytics"])